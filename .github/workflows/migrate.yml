name: Database Migration & Schema Validation

on:
  push:
    branches: [master, main, develop]
    paths:
      - 'migration/**'
      - 'model/**'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  pull_request:
    branches: [master, main, develop]
    paths:
      - 'migration/**'
      - 'model/**'
      - '**/Cargo.toml'
      - '**/Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Job 1: Migration Testing on Multiple PostgreSQL Versions
  migration-test:
    name: Migration Test (PostgreSQL ${{ matrix.postgres-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        postgres-version: [13, 14, 15, 16]
      fail-fast: false
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: loka_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-migration-${{ matrix.postgres-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-migration-${{ matrix.postgres-version }}-
            ${{ runner.os }}-cargo-migration-
            ${{ runner.os }}-cargo-

      - name: Install sea-orm-cli
        run: cargo install sea-orm-cli --locked

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U root; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Test fresh migration (up)
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_migration_test
        run: |
          echo "=== Running fresh migrations ==="
          cd migration
          cargo run

      - name: Verify schema state
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_migration_test
        run: |
          echo "=== Verifying schema state ==="
          
          # Check that all expected tables exist
          psql $DATABASE_URL -c "\dt" | tee schema_state.txt
          
          # Verify specific tables exist
          for table in pools miners workers submissions earnings distributions; do
            if psql $DATABASE_URL -c "\d $table" > /dev/null 2>&1; then
              echo "✅ Table '$table' exists"
            else
              echo "❌ Table '$table' missing"
              exit 1
            fi
          done

      - name: Generate and validate SeaORM entities
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_migration_test
        run: |
          echo "=== Generating SeaORM entities ==="
          
          # Generate entities from current schema
          mkdir -p /tmp/generated_entities
          sea-orm-cli generate entity \
            --database-url $DATABASE_URL \
            --output-dir /tmp/generated_entities
          
          echo "=== Comparing with existing entities ==="
          
          # Compare generated entities with existing ones
          if diff -r model/src/entities/ /tmp/generated_entities/ > /dev/null; then
            echo "✅ SeaORM entities match database schema"
          else
            echo "❌ SeaORM entities do not match database schema"
            echo "Differences found:"
            diff -r model/src/entities/ /tmp/generated_entities/ || true
            exit 1
          fi

      - name: Test migration rollback capability
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_migration_test
        run: |
          echo "=== Testing migration rollback ==="
          
          # Get current migration status
          cd migration
          cargo run -- status
          
          # Try to rollback one migration (if possible)
          latest_migration=$(cargo run -- status | tail -1 | awk '{print $1}')
          if [ ! -z "$latest_migration" ]; then
            echo "Rolling back migration: $latest_migration"
            cargo run -- down
            echo "✅ Rollback successful"
            
            # Re-run migration to restore state
            cargo run
            echo "✅ Re-migration successful"
          else
            echo "ℹ️ No migrations to rollback"
          fi

      - name: Upload schema artifacts
        uses: actions/upload-artifact@v4
        with:
          name: schema-validation-pg${{ matrix.postgres-version }}-${{ github.sha }}
          path: |
            schema_state.txt
            /tmp/generated_entities/

  # Job 2: Schema Compatibility Testing
  schema-compatibility:
    name: Schema Compatibility Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: loka_schema_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-schema-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-schema-
            ${{ runner.os }}-cargo-

      - name: Install sea-orm-cli
        run: cargo install sea-orm-cli --locked

      - name: Test model compilation
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_schema_test
        run: |
          echo "=== Testing model compilation ==="
          
          # Build migration crate
          cd migration
          cargo build
          
          # Build model crate
          cd ../model
          cargo build
          
          # Test that models can be used
          cargo test

      - name: Validate foreign key constraints
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_schema_test
        run: |
          echo "=== Validating foreign key constraints ==="
          
          # Run migrations
          cd migration
          cargo run
          
          # Check foreign key constraints
          psql $DATABASE_URL -c "
            SELECT 
              tc.table_name, 
              kcu.column_name, 
              ccu.table_name AS foreign_table_name,
              ccu.column_name AS foreign_column_name 
            FROM 
              information_schema.table_constraints AS tc 
              JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
                AND tc.table_schema = kcu.table_schema
              JOIN information_schema.constraint_column_usage AS ccu
                ON ccu.constraint_name = tc.constraint_name
                AND ccu.table_schema = tc.table_schema
            WHERE tc.constraint_type = 'FOREIGN KEY';" | tee foreign_keys.txt
          
          echo "✅ Foreign key constraints validated"

      - name: Test data integrity constraints
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_schema_test
        run: |
          echo "=== Testing data integrity constraints ==="
          
          # Test that constraints are properly enforced
          psql $DATABASE_URL -c "
            -- Test unique constraints
            SELECT schemaname, tablename, indexname 
            FROM pg_indexes 
            WHERE schemaname = 'public' 
              AND indexname LIKE '%unique%' OR indexname LIKE '%pkey%';
          " | tee constraints.txt
          
          echo "✅ Data integrity constraints validated"

      - name: Upload validation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: schema-validation-${{ github.sha }}
          path: |
            foreign_keys.txt
            constraints.txt

  # Job 3: Migration Performance Testing
  migration-performance:
    name: Migration Performance Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: loka_perf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-migrate-perf-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-migrate-perf-
            ${{ runner.os }}-cargo-

      - name: Install sea-orm-cli
        run: cargo install sea-orm-cli --locked

      - name: Test migration performance
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_perf_test
        run: |
          echo "=== Testing migration performance ==="
          
          cd migration
          
          # Time the migration process
          start_time=$(date +%s)
          cargo run
          end_time=$(date +%s)
          
          migration_time=$((end_time - start_time))
          echo "Migration completed in ${migration_time} seconds"
          
          # Fail if migration takes too long (more than 60 seconds)
          if [ $migration_time -gt 60 ]; then
            echo "❌ Migration took too long: ${migration_time}s > 60s"
            exit 1
          else
            echo "✅ Migration performance acceptable: ${migration_time}s"
          fi

      - name: Test large dataset migration
        env:
          DATABASE_URL: postgres://root:root@localhost:5432/loka_perf_test
        run: |
          echo "=== Testing with large dataset ==="
          
          # Insert test data to simulate production load
          psql $DATABASE_URL -c "
            -- Insert test pools
            INSERT INTO pools (id, name, address, port, username, password, created_at, updated_at)
            SELECT 
              generate_random_uuid(),
              'Pool ' || i,
              '192.168.1.' || (i % 254 + 1),
              3333 + (i % 1000),
              'user' || i,
              'pass' || i,
              NOW() - (i || ' minutes')::interval,
              NOW()
            FROM generate_series(1, 1000) i;
            
            -- Insert test miners
            INSERT INTO miners (id, pool_id, username, worker_name, ip_address, user_agent, authorized_at, created_at, updated_at)
            SELECT 
              generate_random_uuid(),
              (SELECT id FROM pools ORDER BY RANDOM() LIMIT 1),
              'miner' || i,
              'worker' || i,
              '10.0.0.' || (i % 254 + 1),
              'Loka-Miner/1.0',
              NOW() - (i || ' minutes')::interval,
              NOW() - (i || ' minutes')::interval,
              NOW()
            FROM generate_series(1, 5000) i;
          "
          
          # Test query performance on large dataset
          echo "Testing query performance..."
          psql $DATABASE_URL -c "EXPLAIN ANALYZE SELECT COUNT(*) FROM miners;" | tee query_performance.txt
          
          echo "✅ Large dataset testing completed"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: migration-performance-${{ github.sha }}
          path: query_performance.txt