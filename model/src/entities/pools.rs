//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "pools")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    pub bind: i16,
    pub host: String,
    pub port: i16,
    pub username: String,
    pub password: Option<String>,
    pub sep1: String,
    pub sep2: String,
    pub offsets: i16,
    #[sea_orm(column_type = "Float")]
    pub difficulty: f32,
    pub settlement: Time,
    pub active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::distributions::Entity")]
    Distributions,
    #[sea_orm(has_many = "super::earnings::Entity")]
    Earnings,
    #[sea_orm(has_many = "super::submissions::Entity")]
    Submissions,
    #[sea_orm(has_many = "super::workers::Entity")]
    Workers,
}

impl Related<super::distributions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Distributions.def()
    }
}

impl Related<super::earnings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Earnings.def()
    }
}

impl Related<super::submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Submissions.def()
    }
}

impl Related<super::workers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Workers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
