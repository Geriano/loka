//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "workers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub pool_id: Uuid,
    pub miner_id: Uuid,
    pub name: String,
    pub created_at: DateTime,
    pub last_seen: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::distributions::Entity")]
    Distributions,
    #[sea_orm(
        belongs_to = "super::miners::Entity",
        from = "Column::MinerId",
        to = "super::miners::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Miners,
    #[sea_orm(
        belongs_to = "super::pools::Entity",
        from = "Column::PoolId",
        to = "super::pools::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Pools,
    #[sea_orm(has_many = "super::submissions::Entity")]
    Submissions,
}

impl Related<super::distributions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Distributions.def()
    }
}

impl Related<super::miners::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Miners.def()
    }
}

impl Related<super::pools::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pools.def()
    }
}

impl Related<super::submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Submissions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
