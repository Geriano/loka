name: loka-development
services:
  # PostgreSQL Database for Development
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=loka
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - loka-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d loka"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    cpus: 0.5

  # Redis for Development Caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-dev-data:/data
    expose:
      - "6379"
    networks:
      - loka-dev-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    cpus: 0.5

  # Loka Stratum Development Build
  stratum:
    build:
      context: .
      dockerfile: stratum/Dockerfile
      target: debug
    restart: unless-stopped
    ports:
      - "3333:3333"
    expose:
      - "9090"
    environment:
      - DATABASE_URL=postgres://root:root@host.docker.internal:5432/loka
      - RUST_LOG=trace
      - RUST_BACKTRACE=full
      - ENV=development
    volumes:
      - ./stratum/config:/app/config:ro
      # Mount source for hot-reload development
      - ./stratum/src:/workspace/stratum/src:ro
      - ./model/src:/workspace/model/src:ro
      - ./utils/metrics/src:/workspace/utils/metrics/src:ro
      - stratum-data:/app/data
      - stratum-logs:/app/logs
    command: ["loka-stratum", "start"]
    networks:
      - loka-dev-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9090"
      - "prometheus.io/path=/metrics/prometheus"
  
  # Nginx proxy
  proxy:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - loka-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      stratum:
        condition: service_healthy
      grafana:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      cadvisor:
        condition: service_healthy
      loki:
        condition: service_healthy
      error-tracker:
        condition: service_healthy

  # Development Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.0
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=1GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus/prometheus.development.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - loka-dev-network
    depends_on:
      stratum:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    # cpus: 0.5

  # Development Grafana
  grafana:
    image: grafana/grafana:10.2.0
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_LOG_LEVEL=debug
      - GF_RENDERING_SERVER_URL=http://proxy:8000/grafana-renderer/
      - GF_SERVER_ROOT_URL=http://localhost:8000/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_SECURITY_CSRF_ENABLED=false
      - GF_SECURITY_CSRF_TRUSTED_ORIGINS=*
      - GF_SECURITY_CSRF_ADDITIONAL_HEADERS=*
    expose:
      - "3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    networks:
      - loka-dev-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    cpus: 0.5
    
  grafana-renderer:
    image: grafana/grafana-image-renderer:3.8.0
    restart: unless-stopped
    expose:
      - "8081"
    environment:
      - ENABLE_METRICS=true
      - HTTP_PORT=8081
    networks:
      - loka-dev-network
    healthcheck:
      test: ["CMD-SHELL", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    cpus: 0.5

  # Node Exporter (system metrics)
  node-exporter:
    image: prom/node-exporter:v1.6.1
    restart: unless-stopped
    expose:
      - "9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - loka-dev-network
    healthcheck:
      test: ["CMD-SHELL", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 60s
    cpus: 0.5

  # cAdvisor (container metrics)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    restart: unless-stopped
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    networks:
      - loka-dev-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    cpus: 0.5

  # Loki for log aggregation (alternative to Sentry)
  loki:
    image: grafana/loki:2.9.0
    restart: unless-stopped
    expose:
      - "3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    environment:
      - LOKI_DATA_PATH=/loki
    user: "10001:10001"
    networks:
      - loka-dev-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    cpus: 0.5

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/loki/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - loka-dev-network
    depends_on:
      - loki
    cpus: 0.5

  # Error tracking service using Prometheus Pushgateway
  error-tracker:
    image: prom/pushgateway:v1.6.2
    restart: unless-stopped
    expose:
      - "9091"
    networks:
      - loka-dev-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9091/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    cpus: 0.5

volumes:
  postgres-dev-data:
    driver: local
  redis-dev-data:
    driver: local
  stratum-data:
    driver: local
  stratum-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

networks:
  loka-dev-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: loka-dev-br0
